using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Trust
{
    /// <summary>
    /// Interaction logic for ImportRountineManager.xaml
    /// </summary>
    public partial class ImportRountineManager : Page
    {
        private SolidColorBrush highlightBrush = new SolidColorBrush(Colors.Orange);
        private SolidColorBrush normalBrush = new SolidColorBrush(Colors.White);

        public ImportRountineManager()
        {
            InitializeComponent();
            //get the name of the table the user wants to edit
            List<Bll.ImportHeader> imp = Bll.ImportRoutine.GetAllImportRoutineDetails();
            //check the number of details
            this.dgHeaders.ItemsSource = imp;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }

        private void dataGrid1_AutoGeneratedColumns(object sender, EventArgs e)
        {
            //loop through the rows and ensure that the data is correct.
            //loop through and find the correct
        }

        private void butAdd_Click(object sender, RoutedEventArgs e)
        {
            //get the target table 
            ComboBoxItem item = (ComboBoxItem)this.cbTable.SelectedItem;
            string tableName = item.Name;

            item = (ComboBoxItem)this.cbInputFormat.SelectedItem;
            string type = item.Name;

            item = (ComboBoxItem)this.cbImportClass.SelectedItem;
            string importClass = "Trust.Bll.Import." + item.Name;

            Bll.ImportHeader.InsertImportHeader(type, this.txtDeliminator.Text, this.txtTabName.Text, tableName, this.txtName.Text, importClass);

            this.txtDeliminator.Text = "";
            this.txtTabName.Text = "";
            this.txtName.Text = "";

            //get the name of the table the user wants to edit
            List<Bll.ImportHeader> imp = Bll.ImportRoutine.GetAllImportRoutineDetails();
            //check the number of details
            this.dgHeaders.ItemsSource = imp;
        }

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            //delete the selected item 
            Bll.ImportHeader selected = this.dgHeaders.SelectedItem as Bll.ImportHeader;
            selected.Delete();
            //repopulate the table
            List<Bll.ImportHeader> imp = Bll.ImportRoutine.GetAllImportRoutineDetails();
            this.dgHeaders.ItemsSource = imp;
        }

        private void dgHeaders_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {            
            //change the background of the selected row.  
            if (sender != null)
            {
                DataGrid grid = sender as DataGrid;

                foreach (var r in grid.Items)
                {
                    //change colour to the local variable brush colour
                    DataGridRow dgr = grid.ItemContainerGenerator.ContainerFromItem(r) as DataGridRow;
                    dgr.Background = this.normalBrush;
                }

                if (grid != null && grid.SelectedItems != null && grid.SelectedItems.Count == 1)
                {
                    //change colour to the local variable brush colour
                    DataGridRow dgr = grid.ItemContainerGenerator.ContainerFromItem(grid.SelectedItem) as DataGridRow;
                    dgr.Background = this.highlightBrush;
                }
            }

            //load the import routine form the selectedItem 
            Bll.ImportHeader selected = this.dgHeaders.SelectedItem as Bll.ImportHeader;
            Bll.ImportRoutine routine = new Bll.ImportRoutine(selected.Id);
            
            //add the field list to the mappings
            this.dgMappings.ItemsSource = routine.Fields;
        }

        private void butSaveMapping_Click(object sender, RoutedEventArgs e)
        {
            //grab the first instance of an importfield 
            Bll.ImportField importField =  (Bll.ImportField)this.dgMappings.Items[0];
            
            //create a blank instance of the get the relevant import rountine and populate the header value;
            Bll.ImportRoutine rountine = new Bll.ImportRoutine();
            rountine.Header = Bll.ImportHeader.GetImportHeader(importField.ImportToHeader);

            //loop through the rows in the data table and create the mappings.  
            foreach (var item in this.dgMappings.Items)
            {
                //Get the instance of the field the field alaises as required.  
                rountine.Fields.Add((Bll.ImportField)item);
            }
            //save these new mappings
            rountine.SaveMappings();
        }
    }
}
