using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using ExtendedGrid.Classes;

namespace Trust
{
    /// <summary>
    /// Interaction logic for Reports.xaml
    /// </summary>
    public partial class MatchingManager : Page
    {
        public MatchingManager()
        {
            InitializeComponent();
            this.extendedDataGrid1.ItemsSource = Bll.MatchingResultReports.GetAll();
        }



        private void butBrowse_Click(object sender, RoutedEventArgs e)
        {
            // Create OpenFileDialog
            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
            dlg.DefaultExt = ".xlsx"; // Default file extension
            dlg.Filter = "Excel documents (.xlsx)|*.xlsx"; // Filter files by extension7

            // Display OpenFileDialog by calling ShowDialog method
            Nullable<bool> result = dlg.ShowDialog();
            string filename = "";

            // Get the selected file name and display in a TextBox
            if (result == true)
            {
                // Open document
                try
                {
                    filename = dlg.FileName;
                }
                catch(Exception ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                }
            }

            if (filename != "")
            {
                if (!filename.ToLower().Contains(".xls"))
                {
                    filename += ".xlsx";
                }
                this.extendedDataGrid1.ExportToExcel("Trust Export", filename, true);
            }   
        }

        private void extendedDataGrid1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void butBrowse_Copy1_Click(object sender, RoutedEventArgs e)
        {
            if(this.butDeleteMode.Content.ToString() == "Swap to delete mode")
            {
                this.butDeleteMode.Content = "Save";
                foreach (ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn c in this.extendedDataGrid1.Columns)
                {
                    if (c.Header.ToString() == "Deleted")
                    {
                        c.IsReadOnly = false;
                    }
                }
            }
            else
            {
                this.butDeleteMode.Content = "Swap to delete mode";

                List<Bll.MatchingResultReports> current = Bll.MatchingResultReports.GetAll();
                foreach (var v in this.extendedDataGrid1.Items.SourceCollection)
                {
                    if(v.GetType() == typeof(Bll.MatchingResultReports))
                    {
                        Bll.MatchingResultReports currentMatch = (Bll.MatchingResultReports)v;
                        if (currentMatch.Deleted && !current.Where(i=> i.ID == currentMatch.ID).First().Deleted)
                        {
                            Bll.MatchingResult.DeleteMatch(currentMatch.ID);
                        }
                    }
                }
                foreach (ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn c in this.extendedDataGrid1.Columns)
                {
                    c.IsReadOnly = true;
                }

                //now refresh the data 
                this.extendedDataGrid1.ItemsSource = Bll.MatchingResultReports.GetAll();
            }
        }

        private void extendedDataGrid1_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (ExtendedGrid.Microsoft.Windows.Controls.DataGridColumn c in this.extendedDataGrid1.Columns)
            {
                c.IsReadOnly = true;
            }
        }
    }
}
